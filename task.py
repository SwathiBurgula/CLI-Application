# -*- coding: utf-8 -*-
"""Task.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UJd3RJw_jfY8GBz0iCpbqSeSCEg77XkM
"""

import argparse
import re
from google.colab import files

IPv4_REGEX = r'\b(?:\d{1,3}\.){3}\d{1,3}\b'
IPv6_REGEX = r'\b([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}\b'
TIMESTAMP_REGEX = r'\b\d{2}:\d{2}:\d{2}\b'


def parse_ipv4(line):
    """Detect IPv4 addresses in a line and highlight them"""
    return re.sub(IPv4_REGEX, lambda m: f'\033[1;31m{m.group(0)}\033[0m', line)

def parse_ipv6(line):
    """Detect IPv6 addresses in a line and highlight them"""
    return re.sub(IPv6_REGEX, lambda m: f'\033[1;32m{m.group(0)}\033[0m', line)

def parse_timestamps(line):
    """Detect timestamps in the format HH:MM:SS"""
    return bool(re.search(TIMESTAMP_REGEX, line))


def process_file(file_content, options):
    lines = file_content.splitlines()
    filtered_lines = []

    for line in lines:
        if options.timestamps and not parse_timestamps(line):
            continue
        if options.ipv4 and not re.search(IPv4_REGEX, line):
            continue
        if options.ipv6 and not re.search(IPv6_REGEX, line):
            continue

        if options.ipv4:
            line = parse_ipv4(line)
        if options.ipv6:
            line = parse_ipv6(line)

        filtered_lines.append(line)

    if options.first:
        filtered_lines = filtered_lines[:options.first]
    elif options.last:
        filtered_lines = filtered_lines[-options.last:]

    for line in filtered_lines:
        print(line)

def main(file_content, args):
    parser = argparse.ArgumentParser(description="Log parsing utility")
    parser.add_argument('-f', '--first', type=int, help="Print first NUM lines")
    parser.add_argument('-l', '--last', type=int, help="Print last NUM lines")
    parser.add_argument('-t', '--timestamps', action='store_true', help="Print lines containing timestamps (HH:MM:SS)")
    parser.add_argument('-i', '--ipv4', action='store_true', help="Print lines containing an IPv4 address")
    parser.add_argument('-I', '--ipv6', action='store_true', help="Print lines containing an IPv6 address")

    options = parser.parse_args(args)

    process_file(file_content, options)

def upload_and_parse():
    uploaded = files.upload()
    for filename in uploaded.keys():
        with open(filename, 'r') as file:
            file_content = file.read()

        args = ['--first', '10', '--timestamps']
        main(file_content, args)

upload_and_parse()